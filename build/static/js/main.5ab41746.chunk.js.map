{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","active","isRed","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","Footer","href","target","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","class","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5ab41746.chunk.js","sourcesContent":["import React from 'react'\nimport './InfoBox.css';\nimport { Card, CardContent, Typography } from '@material-ui/core'\n\nfunction InfoBox({ title, cases, active, isRed, total, ...props }) {\n  return (\n    <Card\n      onClick={props.onClick}\n      className={`infoBox ${active && \"infoBox--selected\"} ${isRed && \"infoBox--red\"}`}>\n      <CardContent>\n        {/* Title */}\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">\n          {title}\n        </Typography>\n        {/* Number of cases */}\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\n\n        {/* 1.2M total */}\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\n          {total} Total\n        </Typography>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default InfoBox\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    rgb: \"rgb(204, 16, 52)\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgb(125, 215, 29)\",\n    half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 2000,\n  },\n};\nexport const sortData = (data) => {\n  const sortedData = [...data];\n\n  return sortedData.sort((a, b) => a.cases > b.cases ? -1 : 1);\n}\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\n\nexport const showDataOnMap = (data, casesType = \"cases\") => (\n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      fillOpacity={0.4}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div className=\"info-flag\" style={{ backgroundImage: `url(${country.countryInfo.flag})` }}></div>\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\n          <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\n          <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\n        </div>\n      </Popup>\n    </Circle>\n  ))\n);","import React from 'react'\nimport './Map.css';\nimport { Map as LeafletMap, TileLayer } from 'react-leaflet'\nimport { showDataOnMap } from './util';\n\nfunction Map({ countries, casesType, center, zoom }) {\n  return (\n    <div className=\"map\">\n      <LeafletMap center={center} zoom={zoom}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {/* Loop through all countries with draw circles */}\n        {showDataOnMap(countries, casesType)}\n      </LeafletMap>\n    </div>\n  )\n}\n\nexport default Map\n","import React from 'react'\nimport numeral from 'numeral'\nimport './Table.css'\n\nfunction Table({ countries }) {\n  return (\n    <div className=\"table\">\n      {countries.map(({ country, cases }) => (\n        <tr>\n          <td>{country} </td>\n          <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\n        </tr>\n      ))}\n    </div>\n  );\n}\n\nexport default Table\n","import React, { useState, useEffect } from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\n\nconst buildChartData = (data, casesType) => {\n  const chartData = [];\n  let lastDataPoint;\n\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      const newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      }\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n}\n\nfunction LineGraph({ casesType, ...props }) {\n  const [data, setData] = useState({})\n\n\n\n  useEffect(() => {\n    const fetchData = async () => {\n      fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\n        .then(response => response.json())\n        .then(data => {\n          console.log(data)\n          const chartData = buildChartData(data, casesType);\n          setData(chartData);\n        })\n    }\n\n    fetchData();\n\n  }, [casesType]);\n\n\n\n  return (\n    <div className={props.className}>\n      {\n        data?.length > 0 && (\n          <Line\n            options={options}\n            data={{\n              datasets: [\n                {\n                  backgroundColor: \"rgba(204, 16, 52,0.5)\",\n                  borderColor: \"#CC1034\",\n                  data: data\n                }\n              ]\n            }} />\n        )\n      }\n\n    </div>\n  )\n}\n\nexport default LineGraph\n","import React from 'react'\nimport './Footer.css'\nfunction Footer() {\n  return (\n    <div className=\"footer\">\n      <p><strong>2020</strong>. <a href=\"https://www.instagram.com/iimmafahir/\" target=\"_blank\">iimmafahir</a>.</p>\n    </div>\n  )\n}\n\nexport default Footer\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { FormControl, Select, MenuItem, Card, CardContent } from '@material-ui/core';\nimport InfoBox from './InfoBox'\nimport Map from './Map'\nimport Table from './Table'\nimport { sortData, prettyPrintStat } from './util';\nimport LineGraph from './LineGraph';\nimport \"leaflet/dist/leaflet.css\";\nimport Footer from './Footer';\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\")\n\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then(response => response.json())\n      .then(data => {\n        setCountryInfo(data);\n      })\n  }, [])\n  //STATE = how to create variable in react\n  useEffect(() => {\n    // async => send a req, wait for it, do something with\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then(response => response.json())\n        .then((data) => {\n          const countries = data.map((country) => (\n            {\n              name: country.country,\n              value: country.countryInfo.iso2\n            }\n          ))\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n        })\n    }\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    const url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4)\n      })\n  }\n  console.log(\"COUNTRY INFO >>\", countryInfo)\n  return (\n    <div className=\"app\">\n      <div class=\"app__content\">\n\n        <div className=\"app__left\">\n          <div className=\"app__header\">\n            <h1>COVID-19 TRACKER</h1>\n            <FormControl className=\"app__dropdown\">\n              <Select\n                variant=\"outlined\"\n                onChange={onCountryChange}\n                value={country}>\n                <MenuItem value=\"worldwide\">WorldWide</MenuItem>\n                {\n                  countries.map(country => (\n                    <MenuItem value={country.value}>{country.name}</MenuItem>\n                  ))\n                }\n              </Select>\n            </FormControl>\n          </div>\n\n          <div className=\"app__stats\">\n            <InfoBox\n              isRed\n              active={casesType === \"cases\"}\n              onClick={e => setCasesType('cases')} title=\"Coronavirus cases\" cases={prettyPrintStat(countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)} />\n            <InfoBox\n              active={casesType === \"recovered\"}\n              onClick={e => setCasesType('recovered')} title=\"Recovered\" cases={prettyPrintStat(countryInfo.todayRecovered)} total={prettyPrintStat(countryInfo.recovered)} />\n            <InfoBox\n              isRed\n              active={casesType === \"deaths\"}\n              onClick={e => setCasesType('deaths')} title=\"Deaths\" cases={prettyPrintStat(countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.deaths)} />\n          </div>\n\n          {/* Map */}\n          <Map\n            casesType={casesType}\n            countries={mapCountries}\n            center={mapCenter}\n            zoom={mapZoom}\n          />\n        </div>\n        <Card className=\"app__right\">\n          <CardContent>\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n            {/* Graph */}\n            <h3 className=\"app__graphTitle\">WorldWide new {casesType}</h3>\n            <LineGraph className=\"app__graph\" casesType={casesType} />\n          </CardContent>\n        </Card>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}